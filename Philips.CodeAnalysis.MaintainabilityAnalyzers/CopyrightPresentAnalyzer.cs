// © 2019 Koninklijke Philips N.V. See License.md in the project root for license information.

using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Diagnostics;
using Philips.CodeAnalysis.Common;

namespace Philips.CodeAnalysis.MaintainabilityAnalyzers
{
	[DiagnosticAnalyzer(LanguageNames.CSharp)]
	public class CopyrightPresentAnalyzer : DiagnosticAnalyzer
	{
		private const string Title = @"Copyright Present";
		private const string MessageFormat = @"File should start with a copyright statement.";
		private const string Description = @"File should start with a copyright statement.";
		private const string Category = Categories.Documentation;

		private static DiagnosticDescriptor Rule = new DiagnosticDescriptor(Helper.ToDiagnosticId(DiagnosticIds.CopyrightPresent), Title, MessageFormat, Category, DiagnosticSeverity.Error, isEnabledByDefault: true, description: Description);

		public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }

		public override void Initialize(AnalysisContext context)
		{
			context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.Analyze | GeneratedCodeAnalysisFlags.ReportDiagnostics);
			context.EnableConcurrentExecution();
			context.RegisterSyntaxNodeAction(Analyze, SyntaxKind.CompilationUnit);
		}

		private static void Analyze(SyntaxNodeAnalysisContext context)
		{
			CompilationUnitSyntax node = (CompilationUnitSyntax)context.Node;

			if (Helper.IsGeneratedCode(context) || Helper.IsAssemblyInfo(context) || Helper.HasAutoGeneratedComment(node))
			{
				return;
			}

			if (node.FindToken(0).IsKind(SyntaxKind.EndOfFileToken))
			{
				return;
			}

			var first = node.GetLeadingTrivia();

			if (!first.Any())
			{
				CreateDiagnostic(context, node.GetLocation());
				return;
			}

			SyntaxTrivia copyrightSyntax = first[0];

			if (first[0].IsKind(SyntaxKind.RegionDirectiveTrivia))
			{
				if (first.Count < 2 || !first[1].IsKind(SyntaxKind.SingleLineCommentTrivia))
				{
					CreateDiagnostic(context, context.Node.GetLocation());
					return;
				}
				copyrightSyntax = first[1];
			}

			string comment = copyrightSyntax.ToFullString();
			if (!(comment.Contains("©") || comment.Contains("Copyright")))
			{
				CreateDiagnostic(context, copyrightSyntax.GetLocation());
				return;
			}

		}

		private static void CreateDiagnostic(SyntaxNodeAnalysisContext context, Location location)
		{
			Diagnostic diagnostic = Diagnostic.Create(Rule, location);
			context.ReportDiagnostic(diagnostic);
		}
	}
}
